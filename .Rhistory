g <- ggplot(data.saison, aes(x = as.factor(saisons.jours), y = tx.saisons)) +
geom_boxplot(aes(fill = as.factor(saisons.jours))) +
xlab("") + ylab("Taux d'absence moyen par jour") +
ggtitle("Absentéisme et Saisons")
g
g <- ggplot(data.saison, aes(x = as.factor(saisons.jours), y = tx.saisons)) +
geom_boxplot(aes(fill = as.factor(saisons.jours)), outlier.shape = NA) +
xlab("") + ylab("Taux d'absence moyen par jour") +
ggtitle("Absentéisme et Saisons")
g
tx.saisons <- abs(c(rnorm(n = 274, mean = 0.108, sd = 0.04),
rnorm(n = 274, mean = 0.092, sd = 0.06),
rnorm(n = 274, mean = 0.102, sd = 0.09),
rnorm(n = 274, mean = 0.118, sd = 0.05)))
data.saison <- data.frame(saisons.jours, tx.saisons)
data.saison$saisons.jours <- factor(data.saison$saisons.jours, levels = c("Automne", "Hiver", "Printemps", "Eté"))
g <- ggplot(data.saison, aes(x = as.factor(saisons.jours), y = tx.saisons)) +
geom_boxplot(aes(fill = as.factor(saisons.jours)), outlier.shape = NA) +
xlab("") + ylab("Taux d'absence moyen par jour") +
ggtitle("Absentéisme et Saisons")
g
tx.saisons <- abs(c(rnorm(n = 274, mean = 0.108, sd = 0.04),
rnorm(n = 274, mean = 0.092, sd = 0.05),
rnorm(n = 274, mean = 0.102, sd = 0.09),
rnorm(n = 274, mean = 0.118, sd = 0.05)))
data.saison <- data.frame(saisons.jours, tx.saisons)
data.saison$saisons.jours <- factor(data.saison$saisons.jours, levels = c("Automne", "Hiver", "Printemps", "Eté"))
g <- ggplot(data.saison, aes(x = as.factor(saisons.jours), y = tx.saisons)) +
geom_boxplot(aes(fill = as.factor(saisons.jours)), outlier.shape = NA) +
xlab("") + ylab("Taux d'absence moyen par jour") +
ggtitle("Absentéisme et Saisons")
g
set.seed(123)
saisons.jours <- c(rep("Hiver", times = 274),
rep("Printemps", times = 274),
rep("Eté", times = 274),
rep("Automne", times = 274))
tx.saisons <- abs(c(rnorm(n = 274, mean = 0.108, sd = 0.03),
rnorm(n = 274, mean = 0.092, sd = 0.05),
rnorm(n = 274, mean = 0.102, sd = 0.09),
rnorm(n = 274, mean = 0.118, sd = 0.05)))
data.saison <- data.frame(saisons.jours, tx.saisons)
data.saison$saisons.jours <- factor(data.saison$saisons.jours, levels = c("Automne", "Hiver", "Printemps", "Eté"))
g <- ggplot(data.saison, aes(x = as.factor(saisons.jours), y = tx.saisons)) +
geom_boxplot(aes(fill = as.factor(saisons.jours)), outlier.shape = NA) +
xlab("") + ylab("Taux d'absence moyen par jour") +
ggtitle("Absentéisme et Saisons")
g
library(swirl)
swirl()
install_from_swirl("Statistical Inference")
swirl()
1
2
8
8/10
15
qt(.95, 15)
dim(fs)
t.test(fs$sheight - fs$fheight)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
7
8
library(slidify)
library(slidifyLibraries)
data(mtcars)
summary(lm(mpg ~ factor(cyl) + wt))
summary(lm(mpg ~ factor(cyl) + wt, data = mtcars))
swirl()
library(swirl)
swirl()
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1, ])
plot(fitno, which = 1)
coef(fit) - coef(fitno)
View(dfbeta(fit))
resno
| <- out2[1, "y"] - predict(fitno, out2[1,])
resno <- <- out2[1, "y"] - predict(fitno, out2[1,])
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1 - resid(fit)[1]/resno
View(hatvalues(fit))
sigma <- s
sigma <-
)
sigma <- sqrt(resid(fit)/resid(df(fit)))
info()
skip()
skip()
head(cbind(rstd, rstandard(fit)))
plot(fit, which = 3)
plot(fit, which = 2)
skip()
skip()
head(rstudent(fit))
skip()
skip()
plot(fit, which=5)
rm(list = ls())
session.info()
sessionInfo()
library(swirl)
swirl()
View(ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, family = "binary", data = ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, family = "binomial", data = ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds) / (1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
?createDataPartition
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(mixtures)
xnames <- colnames(concrete)[1:8]
featurePlot(x=training[, xnames], y=training$CompressiveStrength, plot="pairs"
)
library(ggplot2)
g <- ggplot(data = training, aes(x = Superplasticizer, y = CompressiveStrength)) + geom_histogram()
g
g <- ggplot(data = training, aes(x = Superplasticizer, y = CompressiveStrength)) + geom_histogram(stat = "identity")
g
histogram(x = Superplasticizer, data = training)
histogram(x = training$Superplasticizer, data = training)
histogram(x = log(training$Superplasticizer))
histogram(x = training$Superplasticizer, data = training)
histogram(x = log(training$Superplasticizer))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(adData)
head(diagnosis)
head(predictors)
ss <- training[,grep('^IL', x = names(training))]
ss
head(ss)
dim(ss)
class(ss)
preProcess(ss, method = "pca", thresh = .8)
preProcess(ss, method = "pca", thresh = .8, outcome = training$diagnosis)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training2 <- predictors[, grep("^IL", colnames(training), value = TRUE)]
head(training2)
IL <- grep("^IL", colnames(predictors))
IL
IL <- grep("^IL", colnames(predictors), value = TRUE)
ILpredictors <- predictors[, IL]
df <- data.frame(ILpredictors, diagnosis)
intrain <- createDataPartition(y = df$diagnosis, p = 3/4)[[1]]
intrain <- createDataPartition(y = df$diagnosis, p = 3/4)
head(intrain)
intrain <- createDataPartition(y = df$diagnosis, p = 3/4)[[1]]
head(intrain)
training <- df[inTrain, ]
testing <- df[-inTrain, ]
model1 <- train(diagnosis ~., method = "glm", data = training)
train(diagnosis ~ ., method="glm", data=training)
library(caret)
train(diagnosis ~ ., method="glm", data=training)
install.packages("e1071")
train(diagnosis ~ ., method="glm", data=training)
model1 <- train(diagnosis ~ ., method="glm", data=training)
prediction1 <- predict(model1, newdata = testing)
C1 <- confusionMatrix(prediction1)
C1 <- confusionMatrix(prediction1, testing$diagnosis)
head(C1)
model2 <- train(diagnosis ~., method = "glm", preProcess = "pca", data = training, trControl=trainControl(preProcOptions=list(thresh=0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
C2 <- confusionMatrix(testing$diagnosis, predict(model2, testing))
C2
Sys.info()
Sys.info()$sysname
Sys.info()[1:4]
Sys.info()[1:3]
Sys.info()
library(AppliedPredictiveModeling)
data("segmentationOriginal")
head(segmentationOriginal)
colnames(segmentationOriginal)
library(caret)
intrain <- createDataPartition(y = segmentationOriginal$Case, p=.75, list=FALSE)
training <- segmentationOriginal[intrain,]
testing <- segmentationOriginal[-intrain,]
dim(training)
dim(segmentationOriginal)
set.seed(125)
modfit <- train(Case ~., method = "rpart", data = training)
modfit$finalModel
print(modfit$finalModel)
library(rattle)
fancyRpartPlot(modfit$finalModel)
fancyRpartPlot(modFit$finalModel)
install.packages("rattle")
library(pgmm)
sessionInfo()
library(pgmm)
data(olive)
olive = olive[,-1]
require(pgmm)
require(ElemStatLearn)
require(ElemStatLearn)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
We can deduce from these tables that although Tornadoes have caused more than twice as much injuries as Heat since 1995, Heat events appear to be the most lethal weather events.
library(pgmm)
data(olive)
olive = olive[,-1]
require(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
head(olive)
library(caret)
?train
names(getModelInfo())
intrain <- createDataPartition(y = segmentationOriginal$Case, p=.75, list=FALSE)
training <- segmentationOriginal[intrain,]
testing <- segmentationOriginal[-intrain,]
set.seed(125)
modfit <- train(Case ~., method = "rpart", data = training)
install.packages("rattle")
library(rattle)
inTrain <- createDataPartition(y = olive$Area, p = .75, list = FALSE)
training <- olive[inTrain,]
testing <- olive[-inTrain,]
modfit <- train(Area ~., method = "rpart", data = training)
newdata = as.data.frame(t(colMeans(olive)))
predict(modfit, newdata = newdata)
modfit <- train(Area ~., method = "rpart", data = training)
newdata = as.data.frame(t(colMeans(olive)))
modfit$finalModel
inTrain <- createDataPartition(y = olive$Area, p = 0.75, list = FALSE)
training <- olive[inTrain,]
testing <- olive[-inTrain,]
modfit <- train(Area ~., method = "rpart", data = training)
newdata = as.data.frame(t(colMeans(olive)))
predict(modfit, newdata = newdata)
newdata = as.data.frame(t(colMeans(olive)))
predict(modfit, newdata = testing)
modfit <- train(Area ~., method = "rpart", data = olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modfit, newdata = newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
colnames(trainSA)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
library(caret)
set.seed(13234)
modfit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method = glm, family = binomial, data = trainSA)
set.seed(13234)
modfit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method = "glm", family = "binomial", data = trainSA)
ptest <- predict(modfit, newdata = testSA)
missClass = function(values,prediction){
sum(((prediction > 0.5)*1) != values)/length(values)
}
modfit$chd
modfit$finalmodel$chd
missclass(trainSA$chd, modfit$finalModel)
modfit$finalModel
ptrain <- predict(modfit, newdata = trainSA)
ptest <- predict(modfit, newdata = testSA)
missClass = function(values,prediction){
sum(((prediction > 0.5)*1) != values)/length(values)
}
missClass(trainSA, ptrain)
missClass(testSA, ptest)
missClass(trainSA$chd, ptrain)
missClass(testSA$chd, ptest)
library(AppliedPredictiveModeling)
data("segmentationOriginal")
library(caret)
intrain <- createDataPartition(y = segmentationOriginal$Case, p=.75, list=FALSE)
training <- segmentationOriginal[intrain,]
testing <- segmentationOriginal[-intrain,]
set.seed(125)
modfit <- train(Case ~., method = "rpart", data = training)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modfit$finalModel)
fancyRpartPlot(modfit$finalModel)
library(rattle)
fancyRpartPlot(modfit$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(modfit$finalModel)
intrain$Case
head(training$Case)
head(segmentationOriginal$Case)
intrain <- createDataPartition(y = segmentationOriginal$Case, p=.75, list=FALSE)
training <- segmentationOriginal[intrain,]
testing <- segmentationOriginal[-intrain,]
set.seed(125)
modfit <- train(Case ~., method = "rpart", data = training)
fancyRpartPlot(modfit$finalModel)
intrain <- createDataPartition(y = segmentationOriginal$Case, p=.75, list=FALSE)
training <- segmentationOriginal[intrain,]
testing <- segmentationOriginal[-intrain,]
set.seed(125)
modfit <- train(Case ~., method = "rpart", data = training)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modfit$finalModel)
data("segmentationOriginal")
rm(list=ls())
data("segmentationOriginal")
intrain <- createDataPartition(y = segmentationOriginal$Case, p=.75, list=FALSE)
training <- segmentationOriginal[intrain,]
testing <- segmentationOriginal[-intrain,]
data("segmentationOriginal")
set.seed(125)
intrain <- createDataPartition(y = segmentationOriginal$Case, p=.75, list=FALSE)
training <- segmentationOriginal[intrain,]
testing <- segmentationOriginal[-intrain,]
modfit <- train(Case ~., method = "rpart", data = training)
fancyRpartPlot(modfit$finalModel)
plot(modfit$finalModel, uniform=T)
text(modfit$finalModel, cex = 0.8)
fancyRpartPlot(modfit$finalModel)
training$Case
segmentationOriginal$Case
head(segmentationOriginal)
library(AppliedPredictiveModeling)
data("segmentationOriginal")
set.seed(125)
intrain <- createDataPartition(y = segmentationOriginal$Case, p=.75, list=FALSE)
training <- segmentationOriginal[intrain,]
testing <- segmentationOriginal[-intrain,]
modfit <- train(Case ~., method = "rpart", data = training)
finMod <- modfit$finalModel
fancyRpartPlot(finMod)
intrain <- which(segmentationOriginal$Case == 'Train')
training <- segmentationOriginal[intrain,]
testing <- segmentationOriginal[-intrain,]
modfit <- train(Class ~., method = "rpart", data = training)
finMod <- modfit$finalModel
fancyRpartPlot(finMod)
?varImp
modfit <- train(y~., data=vowel.train, method="rf")
imp <- varImp(model.fit$finalModel)
modfit <- train(y~., data=vowel.train, method="rf")
imp <- varImp(model.fit$finalModel)
imp <- varImp(modfit$finalModel)
modfit$finalModel
modfit <- train(y~., data=vowel.train, method="rf")
data(vowel.train)
data(vowel.test)
data(vowel.train)$y <- as.factor(data(vowel.train)$y)
data(vowel.test)$y <- as.factor(data(vowel.test)$y)
data(vowel.train)
data(vowel.test)
data(vowel.train)$y <- as.factor(data(vowel.train)$y)
vowel.train$y <- as.factor(data(vowel.train)$y)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modfit <- train(y~., data=vowel.train, method="rf")
imp <- varImp(modfit$finalModel)
imp
order(imp)
arrange(imp, decreasing = TRUE)
?arrange
arrange(imp, desc(Overall))
imp[order(imp[1]),]
setwd(dir = "./01JHU/8-PracticalML")
trainData <- read.csv("./pml-training.csv", na.strings = c("NA", "", " "))
testData <- read.csv("./pml-testing.csv", na.strings = c("NA", "", " "))
trainData <- trainData[, colSums(is.na(trainData)) == 0]
testData <- testData[, colSums(is.na(testData)) == 0]
str(trainData)
View(trainData)
dim(trainData)
dim(testData)
fit <- train(Classe ~. , method = "rf", data = training)
library(caret)
fit <- train(Classe ~. , method = "rf", data = training)
set.seed(1234)
inTrain <- createDataPartition(trainData$Classe, p = .70)
training <- trainData[inTrain, ]
testing <- testData[-inTrain, ]
trainData <- read.csv("./pml-training.csv", na.strings = c("NA", "", " "))
testData <- read.csv("./pml-testing.csv", na.strings = c("NA", "", " "))
trainData <- trainData[, colSums(is.na(trainData)) == 0]
testData <- testData[, colSums(is.na(testData)) == 0]
set.seed(1234)
inTrain <- createDataPartition(trainData$Classe, p = .70)
training <- trainData[inTrain, ]
testing <- testData[-inTrain, ]
inTrain <- createDataPartition(trainData$Classe, p = .70, list = FALSE)
inTrain <- createDataPartition(trainData$classe, p = .70)
training <- trainData[inTrain, ]
set.seed(1234)
inTrain <- createDataPartition(trainData$classe, p = .70, list = FALSE)
training <- trainData[inTrain, ]
testing <- testData[-inTrain, ]
fit <- train(Classe ~. , method = "rf", data = training)
fit <- train(classe ~. , method = "rf", data = training)
head(training$cvtd_timestamp)
x <- as.Date(training$cvtd_timestamp)
head(x)
class(x)
library(lubridate)
x <- ymd_hm(training$cvtd_timestamp)
x <- dmy_hm(training$cvtd_timestamp)
head(x)
class(x)
str(training)
training[, -c("cvtd_timestamp", "new_window", "user_name", "classe")] <- as.numerictraining[, -c("cvtd_timestamp", "new_window", "user_name", "classe")]
training$cvtd_timestamp <- ymd_hm(training$cvtd_timestamp)
training[, -c("cvtd_timestamp", "new_window", "user_name", "classe")] <- as.numeric(training[, -c("cvtd_timestamp", "new_window", "user_name", "classe")])
training[, -c("cvtd_timestamp", "new_window", "user_name", "classe")] <- as.numeric(training[, -c(cvtd_timestamp, new_window, user_name, classe)])
training[, -c("cvtd_timestamp", "new_window", "user_name", "classe")] <- as.numeric(training[, -c("cvtd_timestamp", "new_window", "user_name", "classe")])
head(training$user_name)
str(training)
trainData <- trainData[, !c("X", "user_name")]
trainData <- trainData[, -c("X", "user_name")]
trainData <- trainData[, -grepl(c("X", "user_name"), names(trainData))]
trainData <- trainData[, !grepl(c("X", "user_name"), names(trainData))]
variables <- grepl(c("X", "user_name"), names(trainData))
variables <- grep(c("X", "user_name"), names(trainData))
variables <- grepl(c("^X", "user_name"), names(trainData))
?arrange
variables <- c("X", "user_name")
variables <- c("X", "user_name")
trainData <- trainData[, !names(trainData) %in% variables]
training$cvtd_timestamp <- ymd_hm(training$cvtd_timestamp)
training$cvtd_timestamp <- dmy_hms(training$cvtd_timestamp)
head(training$cvtd_timestamp)
trainData <- read.csv("./pml-training.csv", na.strings = c("NA", "", " "))
testData <- read.csv("./pml-testing.csv", na.strings = c("NA", "", " "))
trainData <- trainData[, colSums(is.na(trainData)) == 0]
testData <- testData[, colSums(is.na(testData)) == 0]
variables <- c("X", "user_name")
trainData <- trainData[, !names(trainData) %in% variables]
training$cvtd_timestamp <- dmy_hms(training$cvtd_timestamp)
head(training$cvtd_timestamp)
trainData <- read.csv("./pml-training.csv", na.strings = c("NA", "", " "))
testData <- read.csv("./pml-testing.csv", na.strings = c("NA", "", " "))
trainData <- trainData[, colSums(is.na(trainData)) == 0]
testData <- testData[, colSums(is.na(testData)) == 0]
variables <- c("X", "user_name")
trainData <- trainData[, !names(trainData) %in% variables]
testData <- testData[, !names(trainData) %in% variables]
training$cvtd_timestamp <- dmy_hm(training$cvtd_timestamp)
head(testing$cvtd_timestamp)
class(testing$cvtd_timestamp)
?dmy_hm
testing$cvtd_timestamp <- dmy_hm(testing$cvtd_timestamp)
training$cvtd_timestamp <- dmy_hm(training$cvtd_timestamp)
trainData <- read.csv("./pml-training.csv", na.strings = c("NA", "", " "))
testData <- read.csv("./pml-testing.csv", na.strings = c("NA", "", " "))
class(trainData$cvtd_timestamp)
trainData <- trainData[, colSums(is.na(trainData)) == 0]
testData <- testData[, colSums(is.na(testData)) == 0]
head(trainData$cvtd_timestamp)
variables <- c("X", "user_name")
trainData <- trainData[, !names(trainData) %in% variables]
testData <- testData[, !names(trainData) %in% variables]
training$cvtd_timestamp <- dmy_hm(training$cvtd_timestamp)
testing$cvtd_timestamp <- dmy_hm(testing$cvtd_timestamp)
head(testing$cvtd_timestamp)
